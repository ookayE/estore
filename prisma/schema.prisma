// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // Unique identifier for the product, auto-generated using PostgreSQL's gen_random_uuid() function.

  name String
  slug String @unique(map: "product_slug_idx")
  // A unique, URL-friendly identifier for the product (e.g., "cool-product-name").
  // The @unique constraint ensures that no two products have the same slug.

  category    String
  images      String[] // brackets indicate an array of strings
  brand       String
  description String
  stock       Int
  price       Decimal  @default(0) @db.Decimal(12, 2)
  // The price of the product, with up to 12 total digits and 2 decimal places.

  rating Decimal @default(0) @db.Decimal(3, 2)
  // Can store values like 4.25, 3.00, etc., with 3 total digits and 2 decimal places.

  numReviews Int     @default(0)
  isFeatured Boolean @default(false)
  // Indicates whether the product is featured on the homepage or in a special section.
  // Default value is false.

  banner String?
  //? indicates that the field is optional

  createdAt DateTime @default(now()) @db.Timestamp(6)
  // `Timestamp(6)` means it supports microsecond precision.
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  payment       String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  Session       Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) //uses provider (ie Google) and providerid (google ID) to create unique ID rather than create a new ID field
}

model Session {
  sessionToken String   @id @default(cuid())
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}
